================================
The Text cases for Matrix Division Module
=================================


The matrix division module contains a function
that accepts a matrix and a divisor for each
elements in the matrix. Then, returns a new
matrix containing the result of the operation

The elements on the new matrix is rounded to 2dp
at most.
===============================================


>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

::

Using the ``matrix_divided`` function with a valid matrix and valid divisor
==========================================================================
              
	>>> print(matrix_divided([[1, 3, 4], [3, 4, 5]], 2))
	[[0.5, 1.5, 2.0], [1.5, 2.0, 2.5]]


using the ``matrix_divided`` function with invalid(non integer | float) marix elements
======================================================================================
::
	>>> try:
        ...     print(matrix_divided([['1', 2, 3], [3, "4", [3]]], 2))
	... except TypeError as e:
	...     print(e) #doctest: +NORMALIZE_WHITESPACE
	matrix must be a matrix (list of lists) of integers/floats

using the ``matrix_divided`` function with an invalid matrix (unequal row length)
=================================================================================
::
	>>> try:
	...     print(matrix_divided([[1, 2, 3], [1, 2]], 2))
	... except TypeError as e:
	...     print(e) #doctest: +NORMALIZE_WHITESPACE
	Each row of the matrix must have the same size

using the ``matrix_divided`` function with invalid divisor(div is not integer or float)
=======================================================================================
::
	>>> try:
	...     print(matrix_divided([[1, 2, 3], [3, 4, 5]], None))
	... except TypeError as e:
	...     print(e) #doctest: +NORMALIZE_WHITESPACE
	div must be a number

Testing for zero division
============================================================================
::
	>>> try:
	...     print(matrix_divided([[1, 2, 3], [3, 4, 5]], 0))
	... except ZeroDivisionError as e:
	...     print(e) #doctest: +NORMALIZE_WHITESPACE
	division by zero

CASE No Argument
=================================================================
::
        >>> matrix_divided()
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

CASE of matrix == empty list
============================
::
        >>> matrix_divided([], 2)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

CASE of matrix == [[]]
=========================
::
        >>> matrix_divided([[]], 2)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

CASE of more than required argument
===================================
::
        >>> matrix_divided([], 3, 8)
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() takes 2 positional arguments but 3 were given

CASE of no div argument
=======================
::
        >>> matrix_divided([[1, 2, 3], [0.3, 8, 0.2]])
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'
